/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply from: 'gradle/setup.gradle'

defaultTasks = ['assemble']

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

jar.enabled = false // We don't produce a jar

configurations {
  vertxProvided
  vertxIntegCompile.extendsFrom testCompile
  compile.extendsFrom vertxProvided
}

repositories {
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}

dependencies {
  vertxProvided "org.vert-x:vertx-core:$vertxVersion"
  vertxProvided "org.vert-x:vertx-platform:$vertxVersion"

  compile      "org.thymeleaf:thymeleaf:$thymeleafVersion"
  compile      "org.slf4j:slf4j-log4j12:$slf4jVersion"
  compile      "log4j:log4j:$log4jVersion"

  vertxIntegCompile  "org.vert-x:vertx-junit-annotations:$junitAnnoVersion"
  vertxIntegCompile  "org.vert-x:vertx-lang-java:$vertxVersion"
  vertxIntegCompile  "org.vert-x:vertx-lang-rhino:$vertxVersion"
  vertxIntegCompile( "org.vert-x:vertx-testframework:$vertxVersion" ) {
    transitive = false
  }
  vertxIntegCompile  "org.mozilla:rhino:$rhinoVersion"
  vertxIntegCompile  "junit:junit:$junitVersion"
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.vertxProvided
  }
  vertxInteg {
    compileClasspath = configurations.vertxProvided + configurations.testCompile
  }
}

task copyMod( type:Copy, dependsOn: 'classes' ) {
  into "build/mod/$modulename-v$version"
  from 'build/classes/main'
  from 'src/main/conf'
  into( 'lib' ) {
    from configurations.compile
  }
}

// Package into build/libs/mod.zip
task dist(type: Zip, dependsOn: 'copyMod' ) {
  group = 'vert.x'
  description = "Assembles a vert.x module in 'mod.zip' format"
  destinationDir = project.file('build/libs')
  archiveName = 'mod.zip'
  from project.file("build/mod")
}


task prepareVertxTest(type: Sync, dependsOn: 'copyMod' ) {
  from 'build/mod'
  into 'build/tmp/mod-test'
}

task vertxTest(type: Test, dependsOn: [ 'copyMod', 'prepareVertxTest', 'vertxIntegClasses' ]) {
  group = 'vert.x'
  description = 'Run vert.x integration tests'

  systemProperty 'vertx.test.timeout', 15
  systemProperty 'vertx.mods', "${project.projectDir}/build/tmp/mod-test"
  systemProperty 'vertx.version', "${project.version}"

  testLogging.showStandardStreams = true
  testClassesDir = sourceSets.vertxInteg.output.classesDir

  // Add stuff we need
  classpath += configurations.vertxProvided + configurations.vertxIntegCompile
  classpath += files(sourceSets.vertxInteg.output.classesDir, sourceSets.vertxInteg.output.resourcesDir)
  // classpath += sourceSets.vertxInteg.output
  // remove stuff we don't want
  classpath -= files(sourceSets.main.output.classesDir, sourceSets.main.output.resourcesDir)
  // classpath -= sourceSets.main.output
}
